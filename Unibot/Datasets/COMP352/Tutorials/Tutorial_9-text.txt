COMP 352Tutorial 9: Binary Search and AVL Trees1OUTLINE• Binary Search Trees Definitions Search and Update Algorithms Performance• AVL Trees Definitions Update Operations / Rotations• Problem Solving2BINARY SEARCH TREES -DEFINITIONS (1)  A binary search tree is a data structure forstoring the entries of a dictionary. A binary search tree is a binary tree T suchthat each internal node v of T stores an entry(k,x) such that:⚫ Keys stored at nodes in the left subtree of v are lessthan or equal to k.⚫ Keys stored at nodes in the right subtree of v aregreater than or equal to k.3BINARY SEARCH TREES -DEFINITIONS (2) Entries in a binary search tree are stored ininternal nodes; empty external nodes are addedto form a proper binary tree. An inorder traversal of nodes in a binarysearch tree lists the keys in increasing order.4BINARY SEARCH TREES -SEARCHING ALGORITHM This algorithm has O(h) complexity, where h is theheight of the binary search tree. In the worst case, it is linear because the heightwill be equal to n. 5BINARY SEARCH TREES -UPDATE OPERATIONS (1) insertAtExternal(v,e): Insert the element e at theexternal node v, and expand v to be internal, havingnew (empty) external node children; an error occursif v is an internal node. Recursive Algorithm for insertion:6BINARY SEARCH TREES -UPDATE OPERATIONS (2) Insertion of an entry with key 68:7BINARY SEARCH TREES -UPDATE OPERATIONS (3) removeExternal(v): Remove an external nodev and its parent, replacing v's parent with v'ssibling; an error occurs if v is not external. Removal with entry to be removed having anexternal child: remove(32)8BINARY SEARCH TREES -UPDATE OPERATIONS (4)Removal with entry to be removed having both its children internal: remove(88)9BINARY SEARCH TREES -PERFORMANCE The find, insert, and remove methods run in O(h) time, where h is the height of T.  A binary search tree T is an efficient implementation of a dictionary with n entries only if the height of T is small In the worst case, T has height n10AVL TREES -DEFINITIONS An AVL Tree presents a more efficient way toimplement a dictionary. It maintains a logarithmic-time performance, dueto the Height-Balance Property:⚫ For every internal node v of the tree, the heights ofthe children of v differ by at most 1. If this property is violated after insertion/removalfrom an AVL tree, a re-struction is needed.11AVL TREES -ROTATIONS (1) Rotation Algorithm: ⚫ z is the first unbalanced node encountered while going upwards,  y is the child of z with a higher height, and x the child of y with a higher height12AVL TREES –ROTATIONS (2) Representation of a tree before and after a rotation:⚫ If b= y, the trinode restructuring method is called a single rotation.⚫ If b= x, the trinode restructuring method is called a double rotation.13PROBLEM SOLVING - R – 10.1 QUESTION 1 We defined a BST so that keys equal to a node’skey can be in either the left or right subtree ofthe node. Suppose we change the definition sothat we restrict equal keys to the right subtree. What must a subtree of a binary search treecontaining only equal keys look like in this case?14PROBLEM SOLVING - R – 10.6QUESTION 215 Dr. Amongus claims that the order in which afixed set of entries is inserted into a binarysearch tree does not matter— the same treeresults every time. Give a small example thatproves he is wrong.PROBLEM SOLVING - R – 10.3 QUESTION 316 How many different BST’s can store the keys {1,2,3}?PROBLEM SOLVING –QUESTION 4 Draw a Binary Search Tree that initially is empty and shows the result of the tree after inserting the following keys (from left to right): ⚫ key ={ 30, 40, 24, 58, 48, 26, 11, 13 }17PROBLEM SOLVING -QUESTION 5 Build an AVL tree with the following keys: {3, 2, 1, 4 ,5 ,6 ,7 ,16 ,15}18PROBLEM SOLVING -QUESTION 6 Using the AVL tree obtained in Question 5, delete nodes with values 1 and 3, and draw the final orientation of the tree.19	COMP 352	Outline�	Binary Search Trees -�Definitions (1) 	Binary Search Trees -�Definitions (2)	Binary Search Trees -�Searching Algorithm	Binary Search Trees -�Update Operations (1)	Binary Search Trees -�Update Operations (2)	Binary Search Trees -�Update Operations (3)	Binary Search Trees -�Update Operations (4)	Binary Search Trees -�Performance	AVL Trees -�Definitions 	AVL Trees -�Rotations (1)	AVL Trees – �Rotations (2)	Problem Solving - R – 10.1 �Question 1	Problem Solving - R – 10.6�Question 2	Problem Solving - R – 10.3 �Question 3	Problem Solving – �Question 4	Problem Solving -�Question 5	Problem Solving -�Question 6	