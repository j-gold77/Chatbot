COMP 352Tutorial Session 31SESSION OUTLINE Recursion - Tower of Hanoi Exercises: Big-Oh complexity calculation Recursion exercises  Proof of Big-Oh complexity2RECURSION - TOWER OF HANOI Rules: • Only one disk can be moved among the towers at any given time.• Only the "top" disk can be removed.• No large disk can sit over a small disk. Demo example 3Reference: https://www.tutorialspoint.com/data_structures_algorithms/tower_of_hanoi.htmhttps://www.youtube.com/watch?v=YstLjLCGmgg4A B C21ILLUSTRATIVE EXAMPLE 1Move two disks from A to C5A B C2 1ILLUSTRATIVE EXAMPLE 1Move disk 1 from A to B6A B C21ILLUSTRATIVE EXAMPLE 1Move disk 2 from A to cMove disk 1 from B to C7A B C21ILLUSTRATIVE EXAMPLE 2Move three disks from A to C3RECURSION - TOWER OF HANOIStep 1 − Move n-1 disks from source to auxStep 2 − Move nth disk from source to destStep 3 − Move n-1 disks from aux to destSTARTProcedure Hanoi(disk, source, dest, aux)IF disk == 1, THENmove disk from source to destELSEHanoi(disk - 1, source, aux, dest)     // Step 1move disk from source to dest // Step 2Hanoi(disk - 1, aux, dest, source)     // Step 3END IFEND ProcedureSTOP 8Reference: https://www.tutorialspoint.com/data_structures_algorithms/tower_of_hanoi.htmTRACE OF RECURSION FOR 3 DISKS9Hanoi (3,A,C,B)Hanoi (2,A,B,C)Move disk A-CHanoi (2,B,C,A)Hanoi (1,A,C,B)Move disk A-BHanoi (1,C,B,A)Move disk A-CMove disk C-BHanoi (1,B,A,C)Move disk B-CHanoi (1,A,C,B)Move disk B-AMove disk A-CCOMPLEXITY ANALYSISEXERCISESConsider the following code, int recursiveFun1(int n){if (n <= 0)return 1;elsereturn 1 + recursiveFun1(n-1);What’s the big O complexity ?10RECURSION EXERCISESQuestion 1:The Greatest Common Divisor (GCD) of two integers, when at least one of them is not zero, is the largest positive integer that divides the two numbers without a remainder. Given integers 𝑚𝑚 and 𝑛𝑛, find the GCD of 𝑚𝑚 and 𝑛𝑛, recursively.11RECURSION EXERCISESQuestion 2:A prime number (or a prime) is a natural numbergreater than 1 that has no positive divisors other than 1and itself. Write a recursive algorithm to determinewhether integer number 𝑛𝑛 is a prime.12Question 3:Prove that the running time T(n) = n3 + 20n + 1 is O(n4)13PROOF OF BIG-OH COMPLEXITYPROOF OF BIG-OH COMPLEXITYQuestion 4:Prove that the running time T(n) = n3 + 20n + 1 is Ω(n2)14BIG-OH COMPLEXITY CALCULATIONQuestion 5:Show that Big O is transitive by relation.That is, if f(n) = O(g(n)) and g(n) = O(h(n)), then, f(n) ≤ O(h(n)) 15	Comp 352	Session Outline	Recursion - Tower of Hanoi�	Illustrative Example 1�	Illustrative Example 1�	Illustrative Example 1�	Illustrative Example 2�	Recursion - Tower of Hanoi	Trace of recursion for 3 disks	Complexity Analysis�Exercises 	Recursion Exercises	Recursion Exercises	Slide Number 13	Proof of Big-Oh complexity	Big-Oh complexity calculation