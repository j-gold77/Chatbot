Analysis of AlgorithmsMerge-SortDr. Aiman HannaDepartment of Computer Science & Software Engineering Concordia University, Montreal, CanadaThese slides have been extracted, modified and updated from original slides of :Data Structures and Algorithms in Java, 5th edition. John Wiley& Sons, 2010. ISBN 978-0-470-38326-1.Data Structures and the Java Collections Framework by William J. Collins, 3rdedition, ISBN 978-0-470-48267-4. Both books are published by Wiley.Copyright © 2010-2011 WileyCopyright © 2010 Michael  T. Goodrich, Roberto TamassiaCopyright © 2011 William J. CollinsCopyright © 2011-2021 Aiman Hanna All rights reserved Coverage Merge-Sort27  2  9  4  → 2  4  7  97  2  → 2  7 9  4  → 4  97 → 7 2 → 2 9 → 9 4 → 4Merge SortMerge Sort 3Divide-and-Conquer Divide-and conquer is a general algorithmic design paradigm: Divide: divide the input data S in two disjoint subsets S1 and S2 Recur: solve the subproblems associated with S1and S2 Conquer: combine the solutions for S1 and S2 into a solution for S The base case for the recursion are subproblems of size 0 or 1. In these cases the problem can be solved directly. Merge Sort 4Merge-Sort Merge-sort uses divide-and-conquer to perform the sorting operation.  Merge-sort on an input sequence S with nelements consists of three steps: Divide: partition S into two sequences S1 and S2 of about n/2 elements each Recur: recursively sort S1and S2 Conquer: merge S1 and S2 into a unique sorted sequenceAlgorithm mergeSort(S, C)Input sequence S with nelements, comparator COutput sequence S sortedaccording to Cif S.size() > 1(S1, S2) ← partition(S, n/2) mergeSort(S1, C)mergeSort(S2, C)S ← merge(S1, S2)Merge Sort 5Merging Two Sorted Sequences The conquer step of merge-sort consists of merging two sorted sequences A and B into a sorted sequence S containing the union of the elements of A and B. Merging two sorted sequences, each with n/2 elements and implemented by means of a doubly linked list, takes O(n) time.Algorithm merge(A, B)Input sequences A and B withn/2 elements each Output sorted sequence of A ∪ BS ← empty sequencewhile ¬A.isEmpty()  ∧ ¬B.isEmpty()if A.first().element() < B.first().element()S.addLast(A.remove(A.first()))elseS.addLast(B.remove(B.first()))while ¬A.isEmpty()S.addLast(A.remove(A.first()))while ¬B.isEmpty()S.addLast(B.remove(B.first()))return SMerge Sort 6Merge-Sort Tree An execution of merge-sort is depicted by a binary tree each node represents a recursive call of merge-sort and stores unsorted sequence before the execution and its partition sorted sequence at the end of the execution the root is the initial call  the leaves are calls on subsequences of size 0 or 17  2  9  47  2 9  47 2 9 4 DivideMerge Sort 7Merge-Sort Tree2  4 7  92   7 4 97 2 9 4 Recur & Conquer Merge Sort 8Merge-Sort TreeExample*: *Reference: http://en.wikipedia.org/wiki/Merge_sortreference:%20http://en.wikipedia.org/wiki/Merge_sortMerge Sort 9Execution Example Partition7  2  9  4  → 2  4  7  9 3  8  6  1  → 1  3  8  67  2  → 2  7 9  4  → 4  9 3  8  → 3  8 6  1  → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 10Execution Example (cont.) Recursive call, partition7  2  9  4 → 2  4  7  9 3  8  6  1  → 1  3  8  67  2  → 2  7 9  4  → 4  9 3  8  → 3  8 6  1  → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 11Execution Example (cont.) Recursive call, partition7  2  9  4 → 2  4  7  9 3  8  6  1  → 1  3  8  67  2 → 2  7 9  4  → 4  9 3  8  → 3  8 6  1  → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 12Execution Example (cont.) Recursive call, base case7  2  9  4 → 2  4  7  9 3  8  6  1  → 1  3  8  67  2 → 2  7 9  4  → 4  9 3  8  → 3  8 6  1  → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 13Execution Example (cont.) Recursive call, base case7  2  9  4 → 2  4  7  9 3  8  6  1  → 1  3  8  67  2 → 2  7 9  4  → 4  9 3  8  → 3  8 6  1  → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 14Execution Example (cont.) Merge7  2  9  4 → 2  4  7  9 3  8  6  1  → 1  3  8  67  2 → 2  7 9  4  → 4  9 3  8  → 3  8 6  1  → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 15Execution Example (cont.) Recursive call, …, base case, merge7  2  9  4 → 2  4  7  9 3  8  6  1  → 1  3  8  67  2 → 2  7 9  4 → 4  9 3  8  → 3  8 6  1  → 1  67 → 7 2 → 2 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  99 → 9 4 → 4Merge Sort 16Execution Example (cont.) Merge7  2  9  4 → 2  4  7  9 3  8  6  1  → 1  3  8  67  2 → 2  7 9  4 → 4  9 3  8  → 3  8 6  1  → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 17Execution Example (cont.) Recursive call, …, merge, merge7  2  9  4 → 2  4  7  9 3  8  6  1 → 1  3  6  87  2 → 2  7 9  4 → 4  9 3  8 → 3  8 6  1 → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 18Execution Example (cont.) Merge7  2  9  4 → 2  4  7  9 3  8  6  1 → 1  3  6  87  2 → 2  7 9  4 → 4  9 3  8 → 3  8 6  1 → 1  67 → 7 2 → 2 9 → 9 4 → 4 3 → 3 8 → 8 6 → 6 1 → 17  2  9  4  3  8  6  1 → 1  2  3  4  6  7  8  9Merge Sort 19The Cost of Sorting Two Sorted Arrays The algorithm to merge 2 sorted arrays (possibly of different sizes) can be as follows:Algorithm merge(A1, A2, A)Input sorted sequences A 1 and A2 and emptysequence A with sufficient size; all are implemented as arraysOutput sorted sequence A containing A1 ∪ A2i ← j ← 0while i < A1.size()  ∧ j < A2.size() doif A1.get(i) <= A2.get(j) thenS.addLast(A1.get(i))i ← i + 1elseS.addLast(A2.get(j))j ← j + 1while i < A1.size() doS.addLast(A1.get(i))i ← i + 1while j < A2.size() doS.addLast(A2.get(j))j ← j + 1Merge Sort 20The Cost of Sorting Two Sorted Arrays Example2 5 8 11 12 14 150 1 2 3 4 5 63 9 10 18 19 22 250 1 2 3 4 5 62 3 5 8 90 1 2 3 4 5 6 0 7 8 9 10 11 12ijA1A2A We compare the two current elements at the head of the two arrays (which are pointed by i & j) then insert the smaller one in the final array.  Hence, actual cost is O(n1) + O(n2) , where A1 has n1 elements and A2 has n2elements  total cost is hence O(n). Merge Sort 21The Cost of Sorting Two Sorted Lists The algorithm is quite similar to the one for arrays (see Page 5 of these slides).  Simply: As long as the two lists are not empty, compare the two entries pointed by the head of the lists, Pickup the smaller one and insert it at the tail/end of the new list; remove this item afterwards If any of the two lists is still not empty, iterate on it and insert its remaining items at the tail of the Again, the actual cost is O(n1) + O(n2) , where n1 and n2 are the number of elements in the two lists.  Consequently, total cost to sort the two sorted lists is O(n). Merge Sort 22Analysis of Merge-Sort The height h of the merge-sort tree is O(log n) at each recursive call we divide in half the sequence,  The overall amount or work done at the nodes of depth i is O(n) we partition and merge 2i sequences of size n/2i we make 2i+1 recursive calls Thus, the total running time of merge-sort is O(n log n)depth # of sequencessize0 1 n1 2 n/2i 2i n/2i… … …Merge Sort 23Merge-Sort vs. Heap-Sort  Like heap-sort It uses a comparator It has O(n log n) running time.  The cost to sort the elements at each level is O(n) and we do that log n times.  Unlike heap-sort It does not use an auxiliary priority queue It accesses data in a sequential manner (suitable to sort data on a disk)Merge Sort 24Summary of Sorting AlgorithmsAlgorithm Time Notesselection-sort O(n2) slow in-place for small data sets (< 1K)insertion-sort O(n2) slow in-place for small data sets (< 1K)heap-sort O(n log n) fast in-place for large data sets (1K — 1M)merge-sort O(n log n) fast sequential data access for huge data sets (> 1M)	Merge-Sort	Slide Number 2	Divide-and-Conquer	Merge-Sort	Merging Two Sorted Sequences	Merge-Sort Tree	Merge-Sort Tree	Merge-Sort Tree	Execution Example	Execution Example (cont.)	Execution Example (cont.)	Execution Example (cont.)	Execution Example (cont.)	Execution Example (cont.)	Execution Example (cont.)	Execution Example (cont.)	Execution Example (cont.)	Execution Example (cont.)	The Cost of Sorting Two Sorted Arrays	The Cost of Sorting Two Sorted Arrays	The Cost of Sorting Two Sorted Lists	Analysis of Merge-Sort	Merge-Sort vs. Heap-Sort 	Summary of Sorting Algorithms