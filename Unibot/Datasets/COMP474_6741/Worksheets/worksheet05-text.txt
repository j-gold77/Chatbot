COMP474/6741 Intelligent Systems (Winter 2022)Worksheet #5: Recommender SystemsTask 1. Let’s take some movies that have been #tagged (or categorized) as follows:Action Comedy Sci-Fi Horror Drama Romance lengthMovie 1 4 8 6 3 0 0Movie 2 0 5 0 8 5 0Movie 3 1 4 0 3 0 10So, each movie becomes a 6-dimensional vector of tags ti, e.g.,−−−−→Movie1 = 〈4, 8, 6, 3, 0, 0〉. Compute the lengthof each movie vector, which is defined as ||~m|| =√t21 + . . . + t2n (rounded to two significant digits).Task 2. Now you can normalize the vectors, by dividing the raw count of each tag ti by the lengthti||~m|| :Action Comedy Sci-Fi Horror Drama RomanceMovie 1Movie 2Movie 3Use 4 significant digits for this table (protip: the length of each movie vector must now be 1).Task 3. We can now compute how similar the movies are, by computing their cosine similarity. Since thevectors are normalized, this is simply their dot product: sim(~m,~n) = cos(~m,~n) = ~m · ~n =∑imi · ni:Movie 1 Movie 2 Movie 3Movie 1 1Movie 2 1Movie 3 1This is the information we need for an item-to-item recommendation engine: Now we can answer the question,which movie is interesting to (buy, watch) for a customer who (bought, watched) Movie 1?Task 4. Now we want to personalize the recommendations. We collected the following profiles about themovies watched (bought) by our users in the past:Action Comedy Sci-Fi Horror Drama Romance lengthJane 1 2 1 1 1 0Joe 0 1 0 1 0 1Compute the length of each user vector and normalize it like before:Action Comedy Sci-Fi Horror Drama RomanceJaneJoeTask 5. Now we can answer the question which movie a user is interested in. Compute the cosine similaritiesbetween the user vectors and the movie vectors:Movie 1 Movie 2 Movie 3JaneJoeCOMP474/6741 Worksheet: Recommender Systems Winter 2022Task 6. Consider the results from three different recommender systems below: Here, X1–X5 are the items(movies, photos, songs, . . . ) that the systems should have recommended as relevant for a specific user. Theremaining 495 instances are not relevant for the user. A checkmark indicates that a system recommendedthis item to the user (the first Target column is the ground truth):Evaluate the performance of the three systems using the measures Precision and Recall :Precision Recallsystem 1system 2system 3precision =#correct system recommendations#all system recommendationsrecall =#correct system recommendations#all correct recommendationsTask 7. Now we’re looking at ranked results. Based on the output below, compute precision@k = 1k·k∑c=1rel(c)for the three recommender systems (for k = 1, 2, 3):rel(k) precision@k1 2 3 1 2 3 AP@3system 1 1 0 0system 2 0 1 0system 3 0 0 1That is, here each system got exactly one recommendation right, but in a different position.Task 8. Moving on to the average precision, AP @N = 1mN∑k=1precision@k ·rel(k). Compute the AP@3 andadd it to the table above. Here, assume m = 3 (i.e., there could have been 3 correct recommendations in thetop-3). Note the difference in the AP@3 for the three systems!Task 9. Create a content vector for the movie description m1 =“A comedy with zombies.” Start by fillingin the tf values below. Then compute idf = log10Ndf(assume N = 10,000,000) and tf-idf = (1 + log tft,d)×idf.Finally, compute the normalized vector ~q as before (in Tasks 1&2) from the tf-idf vector:m1token tf df idf tf-idf qiaction 50,000comedy 10,000zombies 100,000romantic 10,000You can now use these vectors for (cosine) similarity calculations to find recommendations as before, butthis time based on the content of an item (like a movie description).